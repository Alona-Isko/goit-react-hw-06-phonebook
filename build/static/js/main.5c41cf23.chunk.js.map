{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","hooks/useLocalStorage.js","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameId","shortid","generate","numberId","handleChange","event","currentTarget","value","reset","preventDefault","className","s","form__title","htmlFor","type","form__input","id","onChange","pattern","title","placeholder","required","form__button","ContactList","contacts","onDeleteContact","ContactList__container","map","ContactList__item","ContactList__text","ContactList__button","onClick","Filter","Filter__text","Filter__input","useLocalStorage","contactsList","JSON","parse","window","localStorage","getItem","setContacts","useEffect","setItem","stringify","App","filter","setFilter","container","container__title","find","contact","toLowerCase","alert","completed","Contacts__title","ev","includes","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c41cf23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter__text\":\"Filter_Filter__text__2RHUL\",\"Filter__input\":\"Filter_Filter__input__1RaXN\"};","import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport shortid from 'shortid';\r\n\r\n\r\nexport default function ContactForm({ onSubmit }) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    let nameId = shortid.generate();\r\n    let numberId = shortid.generate();\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            \r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            \r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        \r\n        onSubmit(name, number);\r\n        reset();\r\n    }\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label\r\n                className={s.form__title}\r\n                htmlFor={nameId}\r\n            >\r\n                Name\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                className={s.form__input}\r\n                name=\"name\"\r\n                id={nameId}\r\n                value={name}\r\n                onChange={handleChange}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                placeholder=\"Enter name\"\r\n                required\r\n            />\r\n                \r\n            <label\r\n                className={s.form__title}\r\n                htmlFor={numberId}\r\n            >\r\n                Number\r\n            </label>\r\n            <input\r\n                type=\"tel\"\r\n                className={s.form__input}\r\n                name=\"number\"\r\n                id={numberId}\r\n                value={number}\r\n                onChange={handleChange}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                placeholder=\"Enter phone number\"\r\n                required\r\n            />\r\n                \r\n            <button\r\n                className={s.form__button}\r\n                type=\"submit\"\r\n            >\r\n                Add contact\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n// import PropTypes from 'prop-types';\r\n// import s from './ContactForm.module.css';\r\n// import shortid from 'shortid';\r\n\r\n// class ContactForm extends Component {\r\n//     state = {\r\n//         name: '',\r\n//         number: '',\r\n//     }\r\n\r\n//     nameId = shortid.generate();\r\n//     numberId = shortid.generate();\r\n\r\n//     handleChange = ev => {\r\n//         // console.log(ev.currentTarget);\r\n//         // console.log(ev.currentTarget.name);\r\n//         // console.log(ev.currentTarget.value);\r\n//         const { name, value } = ev.currentTarget;\r\n//         this.setState({\r\n//         [name]: value,\r\n//         });\r\n//     }\r\n\r\n//     handleSubmit = ev => {\r\n//         ev.preventDefault();\r\n\r\n//         this.props.onSubmit(this.state);\r\n//         this.reset();\r\n//     }\r\n\r\n//     reset = () => {\r\n//         this.setState({\r\n//             name: '',\r\n//             number: '',\r\n//         });\r\n//     }\r\n\r\n//     render() {\r\n//         const { name, number } = this.state;\r\n//         return (\r\n//             <form onSubmit={this.handleSubmit}>\r\n//                 <label\r\n//                     className={s.form__title}\r\n//                     htmlFor={this.nameId}\r\n//                 >\r\n//                     Name\r\n//                 </label>\r\n//                     <input\r\n//                     type=\"text\"\r\n//                     className={s.form__input}\r\n//                     name=\"name\"\r\n//                     id={this.nameId}\r\n//                     value={name}\r\n//                     onChange={this.handleChange}\r\n//                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                     placeholder=\"Enter name\"\r\n//                     required\r\n//                     />\r\n                \r\n//                 <label\r\n//                     className={s.form__title}\r\n//                     htmlFor={this.numberId}\r\n//                 >\r\n//                     Number\r\n//                 </label>\r\n//                     <input\r\n//                     type=\"tel\"\r\n//                     className={s.form__input}\r\n//                     name=\"number\"\r\n//                     id={this.numberId}\r\n//                     value={number}\r\n//                     onChange={this.handleChange}\r\n//                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                     title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                     placeholder=\"Enter phone number\"\r\n//                     required\r\n//                     />\r\n                \r\n//                 <button\r\n//                     className={s.form__button}\r\n//                     type=\"submit\"\r\n//                 >\r\n//                     Add contact\r\n//                 </button>\r\n//             </form>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// ContactForm.propTypes = {\r\n//     onSubmit: PropTypes.func.isRequired,\r\n// };\r\n\r\n// export default ContactForm;","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n    return (\r\n        <ul className={s.ContactList__container}>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li\r\n                    className={s.ContactList__item}\r\n                    key={id}>\r\n                    <p className={s.ContactList__text}>{name}: {number}</p>\r\n                    <button\r\n                        className={s.ContactList__button}\r\n                        onClick={() => onDeleteContact(id)}>\r\n                        X\r\n                    </button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        })\r\n    ),\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ContactList;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({value, onChange}) => (\r\n    <label className={s.Filter__text}>\r\n        Find contacts by name\r\n        <input\r\n            type=\"text\"\r\n            className={s.Filter__input}\r\n            value={value}\r\n            onChange={onChange}\r\n        />\r\n    </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import { useState, useEffect } from \"react\";\r\n\r\nconst useLocalStorage = (contactsList) => {\r\n  const [contacts, setContacts] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? contactsList;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(contacts, JSON.stringify('contacts'));\r\n  }, [contacts]);\r\n\r\n  return [contacts, setContacts];\r\n};\r\n\r\nexport default useLocalStorage;","import { useState } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport contactsList from './contacts.json';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport s from './App.module.css';\nimport shortid from 'shortid';\n\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage(contactsList);\n  const [filter, setFilter] = useState('');\n\n  const addContact = (name, number) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n      completed: false,\n    };\n\n    setContacts([contact, ...contacts]);\n  };\n\n  const changeFilter = (ev) => {\n    setFilter(ev.currentTarget.value);\n  };\n\n  const visibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n    return (\n      <div className={s.container}>\n        <h1 className={s.container__title}>Phonebook</h1>\n        \n        <ContactForm onSubmit={addContact} />\n\n        <div>\n          <h2 className={s.Contacts__title}>Contacts</h2>\n          <Filter\n            value={filter}\n            onChange={changeFilter}\n          />\n          <ContactList\n            contacts={visibleContacts()}\n            onDeleteContact={deleteContact}\n          />\n        </div>\n      </div>\n    );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__title\":\"ContactForm_form__title__3YmBL\",\"form__input\":\"ContactForm_form__input__aMpTH\",\"form__button\":\"ContactForm_form__button__3YJDz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList__container\":\"ContactList_ContactList__container__2PWHj\",\"ContactList__item\":\"ContactList_ContactList__item__3MNHv\",\"ContactList__text\":\"ContactList_ContactList__text__3XDd8\",\"ContactList__button\":\"ContactList_ContactList__button__1NX_s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3YHQG\",\"container__title\":\"App_container__title__3M13B\",\"Contacts__title\":\"App_Contacts__title__2Z6zP\"};"],"sourceRoot":""}